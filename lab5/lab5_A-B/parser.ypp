%{
#define YYERROR_VERBOSE
#define YYDEBUG 1
#include <stdio.h>
#include <stdlib.h>
#include "global.hpp"
extern int yyerror(char const *msg);
extern int yylex();
int power(int op2, unsigned int op1);
void printtree(TreeNode *p);
void printtree1(TreeNode *p, int level);
%}

%debug
%printer {fprintf(yyoutput, "%d", $$);} <>

%token DIV MOD DONE ID NUM LIST
%right '^'
%left '*' '/' '%'
%left '+' '-'
%left '<' '>'
%left '&'
%left '|'
%right '?'
%right '='


%union {
	struct TreeNode* p;
	int value;
}
%type <p> list lists expr id assignment;
%type <value> ID NUM

%%

tree : 			 lists DONE				{printtree($1);} tree
			| /*Empty*/
			;

lists : 		 list lists 				{$$ = mknode(LIST, $1, $2);}
			| /* Empty */				{$$ = 0;}
			;

list :    		  assignment	';'
			| expr ';'				{$$ = $1;}
			;

assignment :  id '=' expr 					{$$ = mknode('=',$1,$3);}
			  ;

expr :	 	 	  expr '+' expr				{$$ = mknode('+', $1, $3);}
			| expr '-' expr				{$$ = mknode('-', $1, $3);}
			| expr '&' expr 			{$$ = mknode('&', $1, $3);}
			| expr '|' expr				{$$ = mknode('|', $1, $3);}
			| expr '>' expr				{$$ = mknode('>', $1, $3);}
			| expr '<' expr				{$$ = mknode('<', $1, $3);}
			| expr '?' expr ':' expr %prec '?'	{$$ = mknode('?', $1, $3, $5);}
			| expr '*' expr				{$$ = mknode('*', $1, $3); }
			| expr '/' expr				{$$ = mknode('/', $1, $3);}
			| expr '%' expr				{$$ = mknode('%', $1, $3);}
			| '(' expr ')'				{$$ = $2;}
			| id					{$$ = $1;}
			| NUM					{$$ = mkleaf(NUM, $1);}
			;

id : 			  ID					{$$ = mkleaf(ID,$1);}
			;


%%

int yyerror(char const *msg) {
    error(msg);
    return 0;
}

void parse(){
	yyparse();
}
/*
int yylex(){
	return lexan();
}
*/
int power(int op2, unsigned int op1) 
{ 
    if (op1 == 0) 
        return 1; 
    else if (op1%2 == 0) 
        return power(op2, op1/2)*power(op2, op1/2); 
    else
        return op2*power(op2, op1/2)*power(op2, op1/2); 
} 

void printtree(TreeNode *p){
	printf("Syntax tree:\n");
	printtree1(p,0);
}

void printtree1(TreeNode *p,int level){
	if(p == 0){
		return;
	}
	switch(p->type){
		case ID:
			printf("%*s",2*level,"");
			printf("%s\n", symtable[p->leaf_value].lexeme);
			break;
		case NUM:
			printf("%*s",2*level,"");
			printf("%d\n", p->leaf_value);
			break;
		case '+':
			printf("%*s",2*level,"");
			printf("+\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			break;
		case '-':
			printf("%*s",2*level,"");
			printf("-\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			break;
		case '&':
			printf("%*s",2*level,"");
			printf("&\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			break;
		case '|':
			printf("%*s",2*level,"");
			printf("|\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			break;

		case '<':
			printf("%*s",2*level,"");
			printf("<\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			break;
		case '>':
			printf("%*s",2*level,"");
			printf(">\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			break;
		case '?':
			printf("%*s",2*level,"");
			printf("?:\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			printtree1(p->args[2],level+1);
			break;
		case '*':
			printf("%*s",2*level,"");
			printf("*\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			break;
		case '/':
			printf("%*s",2*level,"");
			printf("*\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			break;
		case '%':
			printf("%*s",2*level,"");
			printf("%%\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			break;

		case '=':
			printf("%*s",2*level,"");
			printf("=\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
			break;

		case LIST:
			printf("%*s",2*level,"");
			printf("LIST\n");
			printtree1(p->args[0],level+1);
			printtree1(p->args[1],level+1);
	}
	
}
